// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/domain/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "chainlink-lite/internal/app/domain"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	context "golang.org/x/net/context"
)

// MockEthPriceTicker is a mock of EthPriceTicker interface.
type MockEthPriceTicker struct {
	ctrl     *gomock.Controller
	recorder *MockEthPriceTickerMockRecorder
}

// MockEthPriceTickerMockRecorder is the mock recorder for MockEthPriceTicker.
type MockEthPriceTickerMockRecorder struct {
	mock *MockEthPriceTicker
}

// NewMockEthPriceTicker creates a new mock instance.
func NewMockEthPriceTicker(ctrl *gomock.Controller) *MockEthPriceTicker {
	mock := &MockEthPriceTicker{ctrl: ctrl}
	mock.recorder = &MockEthPriceTickerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthPriceTicker) EXPECT() *MockEthPriceTickerMockRecorder {
	return m.recorder
}

// FetchPrice mocks base method.
func (m *MockEthPriceTicker) FetchPrice() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchPrice")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchPrice indicates an expected call of FetchPrice.
func (mr *MockEthPriceTickerMockRecorder) FetchPrice() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchPrice", reflect.TypeOf((*MockEthPriceTicker)(nil).FetchPrice))
}

// MockPriceMessageRepository is a mock of PriceMessageRepository interface.
type MockPriceMessageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPriceMessageRepositoryMockRecorder
}

// MockPriceMessageRepositoryMockRecorder is the mock recorder for MockPriceMessageRepository.
type MockPriceMessageRepositoryMockRecorder struct {
	mock *MockPriceMessageRepository
}

// NewMockPriceMessageRepository creates a new mock instance.
func NewMockPriceMessageRepository(ctrl *gomock.Controller) *MockPriceMessageRepository {
	mock := &MockPriceMessageRepository{ctrl: ctrl}
	mock.recorder = &MockPriceMessageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPriceMessageRepository) EXPECT() *MockPriceMessageRepositoryMockRecorder {
	return m.recorder
}

// StorePriceIfAllowed mocks base method.
func (m *MockPriceMessageRepository) StorePriceIfAllowed(ctx context.Context, priceMsg *domain.PriceMessage, minInterval time.Duration) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorePriceIfAllowed", ctx, priceMsg, minInterval)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorePriceIfAllowed indicates an expected call of StorePriceIfAllowed.
func (mr *MockPriceMessageRepositoryMockRecorder) StorePriceIfAllowed(ctx, priceMsg, minInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorePriceIfAllowed", reflect.TypeOf((*MockPriceMessageRepository)(nil).StorePriceIfAllowed), ctx, priceMsg, minInterval)
}
